# -*- coding: utf-8 -*-
"""gano

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mQmuL6-uL5KpKG35hrwysjN_DzbdG5eG
"""

class GPA:
    def __init__(self, completed_semesters, initial_average):
        self.completed_semesters = completed_semesters
        self.GPA = initial_average
        self.Credits = completed_semesters * 30

    def update_credits(self, new_credit):
        previous_total_grade_points = self.Credits * self.GPA
        self.Credits += new_credit
        if self.Credits != 0:
          self.GPA = (previous_total_grade_points) / self.Credits

    def add_course(self, credits, letter_grade):
        grade_point  = self.convert_grade_to_point(letter_grade)
        self.GPA = ((self.Credits * self.GPA) + (credits * grade_point)) / (credits + self.Credits)
        self.Credits += credits

    def convert_grade_to_point(self, letter_grade):
        letter_grade = letter_grade.lower()
        grade_mapping  = {'aa': 4.0, 'ba': 3.5, 'bb': 3.0, 'cb': 2.5, 'cc': 2.0, 'dc': 1.5, 'dd': 1.0, 'fd': 0.5, 'ff': 0.0}
        return grade_mapping.get(letter_grade, 0.0)

    def convert_point_to_grade(self, point):
        if 3.5 <= point  <= 4.0:
            return 'AA'
        elif 3.0 <= point  < 3.5:
            return 'BA'
        elif 2.5 <= point  < 3.0:
            return 'BB'
        elif 2.0 <= point  < 2.5:
            return 'CB'
        elif 1.5 <= point  < 2.0:
            return 'CC'
        elif 1.0 <= point  < 1.5:
            return 'DC'
        elif 0.5 <= point  < 1.0:
            return 'DD'
        elif 0.0 <= point  < 0.5:
            return 'FD'
        else:
            return 'FF'

    def display(self):
        print(f"G.AKTS: {self.Credits:.0f}\nGANO: {self.GPA:.2f}\nGANO Yüzde: {self.GPA / 4.0 * 100:.2f}")

'''Sıfırdan bir GANO hesabı örneği'''

# biten dönem sayısı (her yıl 2 dönem) ve o döneme kadarki GANO
# (bir dönem 30 akts üzerinden hesaplanır)
gano = GPA(0,0)

# G.AKTS düzenle (eğer her dönem için D.AKTS 30 istenmiyorsa)
# veya hesaba katılmayacak derslerin kredilerinin toplamı olabilir
# (mesela tekrar alınacak dersler)
gano.update_credits(0)

# dersleri ekle
gano.add_course(2, 'ba')
gano.add_course(4, 'cb')
gano.add_course(2, 'ba')
gano.add_course(5, 'aa')
gano.add_course(4, 'ba')
gano.add_course(5, 'cc')
gano.add_course(6, 'cb')
gano.add_course(2, 'aa')
gano.display()

''' 4. sınıf güz dönemindeki bir öğrenci için 6 dönem bitmiştir'''

print("------------------------------\nKalan derslerle beraber")
gano2 = GPA(6,2.51)
gano2.display()
# eğer toplam 14 kredilik dersten kaldıysa, temiz ortalama için
print("\nKalan derslersiz")
gano2.update_credits(-14)
gano2.display()
print("\nBazı mevcut dönem dersleriyle")
# üzerine mevcut dönemin kesinleşmiş dersleri
gano2.add_course(5, 'aa')
gano2.add_course(4, 'ba')
gano2.add_course(6, 'cc')
gano2.add_course(3, 'bb')
gano2.display()